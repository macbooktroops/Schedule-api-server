# Generated by Django 2.1.7 on 2019-08-28 06:48

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='이메일')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': '유저',
                'verbose_name_plural': '유저 목록',
                'db_table': 'user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='FriendRequest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_datetime', models.DateTimeField(auto_now_add=True, verbose_name='생성일시')),
                ('updated_datetime', models.DateTimeField(auto_now=True, verbose_name='수정일시')),
                ('assent', models.BooleanField(verbose_name='수락여부')),
                ('assented_at', models.DateTimeField(blank=True, null=True, verbose_name='수락일시')),
                ('request_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='request_user', to=settings.AUTH_USER_MODEL, verbose_name='요청자')),
                ('response_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='response_user', to=settings.AUTH_USER_MODEL, verbose_name='수락자')),
            ],
            options={
                'verbose_name': '친구 요청 status',
                'verbose_name_plural': '친구 요청 status 목록',
                'db_table': 'friendRequest',
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_datetime', models.DateTimeField(auto_now_add=True, verbose_name='생성일시')),
                ('updated_datetime', models.DateTimeField(auto_now=True, verbose_name='수정일시')),
                ('username', models.CharField(max_length=30, verbose_name='이름')),
                ('nickname', models.CharField(max_length=30, verbose_name='닉네임')),
                ('birth', models.DateField(verbose_name='생년월일')),
                ('language', models.CharField(choices=[('KR', 'Korean'), ('EN', 'English')], default='KR', max_length=2, verbose_name='언어')),
                ('friends', models.ManyToManyField(related_name='friends', to=settings.AUTH_USER_MODEL, verbose_name='친구목록')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='유저')),
            ],
            options={
                'verbose_name': '프로필',
                'verbose_name_plural': '프로필 목록',
                'db_table': 'userProfile',
            },
        ),
    ]
